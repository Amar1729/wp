#!/usr/bin/env bash

VERSION="1.1.1"

# wp: a wrapper script mostly for pywal and fetch oneliners
# Note - most wallpaper-changing functions are mac-specific (for now)

# Things to customize:
# _space_id:    change command to get current space
# new_terminal: change command to spawn new terminal

if [[ -n "$XDG_CACHE_HOME" ]]; then
    # default: $HOME/.cache
    ROOT="$XDG_CACHE_HOME/wal"
else
    ROOT="$HOME/.cache/wal"
fi

declare -a FILES=(wp sequences colors.sh colors.css colors.json)

_space_id () {
    # Get ID of current space

    # not impl. for linux yet
    if [[ "Darwin" != "$(uname -s)" ]]; then echo 1; fi

    # (macOS)
    # prefer newer wm
    # TODO - implement functionality for yabai
    if /usr/local/bin/chunkc tiling::query --desktop id 2>/dev/null; then
        if /usr/local/bin/kwmc query space active id 2>/dev/null; then
            echo 1
        fi
    fi
}

_run_wal () {
    # run pywal given input wallpaper.
    #   copy input to cache directory.

    if [[ ! -f "$1" ]]; then exit 1; fi

    # -s skip changing colors
    # -n skip reloading wallpaper
    # -i input file
    wal -sn -i "$1"

    cp "$1" "${ROOT}/wp"
}

_fname_from_space () {
    # $1=space id, $2=filename
    # generate a <space> filename
    # e.g. wp -> wp_1, colors.sh -> colors_1.sh

    SPACE=$1
    base=${2%.*} # colors.json -> colors
    ext=${2##*.} # colors.json -> json
    if [[ ${base} == "${ext}" ]]; then # ext is [wp|sequences] (ie no extension)
        echo "${base}_${SPACE}"
    else
        echo "${base}_${SPACE}.${ext}"
    fi
}

_cache () {
    # given space ID, cache specific files to ROOT
    # (files to cache found in global array $FILES)

    for f in "${FILES[@]}"; do
        f_fname="${ROOT}/$f"
        t_fname="${ROOT}/$(_fname_from_space "$1" "$f")"
        [[ -e "$f_fname" ]] && cp "$f_fname" "$t_fname"
    done
}

_copy () {
    # given $1=source ID and $2=target ID,
    # copy space files from 1 -> 2
    # (files to cache found in global array $FILES)

    for f in "${FILES[@]}"; do
        f_fname="${ROOT}/$(_fname_from_space "$1" "$f")"
        t_fname="${ROOT}/$(_fname_from_space "$2" "$f")"
        [[ -f "$f_fname" ]] && cp "$f_fname" "$t_fname"
    done
}

get_wallpaper () {
    # show the current wallpaper file (in cache)

    SPACE=$(_space_id)
    FILE="${ROOT}/wp_$SPACE"
    if [[ -e $FILE ]]; then
        echo "$FILE"
    else
        echo ""
    fi
}

# TODO - add a check for sequences files that apply to destroyed desktops?
change_wallpaper () {
    # optional flag: --dry
    #   -> only set wallpaper (must be first arg)
    # optional arg: $1=monitor id
    # last arg: $1|$2=wallpaper file
    # - run pywal
    # - copy files into cache
    # - change the wallpaper

    local monitor file dry

    dry=0
    if [[ "$1" == "--dry" ]]; then
        dry=1
        shift
    fi

    if [[ -n "$2" ]]; then
        monitor="$1"
        file="$(realpath "$2")"
    else
        monitor=1
        file="$(realpath "$1")"
    fi

    if [[ ! -f "$file" ]]; then exit 1; fi

    if [[ $dry -eq 0 ]]; then
        (_run_wal "$file" && _cache "$(_space_id)" "$file") >/dev/null 2>&1 &
    fi
    osascript -e "tell application \"System Events\" to tell desktop $monitor to set picture to \"$file\""
}

pixelate () {
    # Pixelate the current wallpaper, crop it to the size of the current terminal, and
    # set the result as the current terminal's background.

    if ! command -v ffmpeg > /dev/null; then
        echo "Requires ffmpeg (with frei0r) to pixelate wallpapers."
        exit 2
    fi

    # check that ffmpeg has required frei0r lib (for darwin; don't know what the path is for linux)
    if [[ $(uname) == 'Darwin' ]]; then
        if [[ ! -e /usr/local/lib/frei0r-1/pixeliz0r.dylib ]]; then
            echo "Need the frei0r plugin for ffmpeg,"
            echo "and the dylib needs to MANUALLY created!"
            echo "Run:"
            echo "  brew install ffmpeg --with-frei0r"
            echo "  cd /usr/local/lib/frei0r-1/"
            # for some reason, ffmpeg looks for .dylibs
            # so you have to manually create this symlink
            echo "  ln -s pixeliz0r.so pixeliz0r.dylib"
            exit 2
        fi
    fi

    local wp
    wp="$(osascript -e 'tell app "finder" to get posix path of (get desktop picture as alias)')"

    # safety check
    [[ ! -e "$wp" ]] && echo "$wp: doesnt exist." && exit 1

    local pixd crpd
    local x y w h
    local -a screen res dims

    pixd="$(mktemp).png"
    crpd="$(mktemp).png"

    # get resolution of screen (os-specific)
    if [[ $(uname) == 'Darwin' ]]; then
        # edge case: user may be using RDM to manually set mac resolution
        if [[ -x /Applications/RDM.app/Contents/MacOS/SetResX ]]; then
            screen=($(/Applications/RDM.app/Contents/MacOS/SetResX -ld|grep -o 'resolution[^ ]*'|grep -Eo '\d+'))
        else
            # fall back to getting info via system_profiler
            screen=($(system_profiler SPDisplaysDataType|grep Resolution|grep -Eo '\d+'))
        fi
    else
        # untested
        screen=($(xrandr | grep '*' | grep -Eo '\d+ x \d+'))
        echo 'make sure this screen res is correct for linux:'
        echo "${screen[@]}"
        echo '(linux) exiting...'
        exit 2
    fi

    trunc () { sed -e 's/\..*//' < /dev/stdin; }

    # get resolution of picture
    res=($(ffmpeg -i "$wp" 2>&1|grep 'Stream'|grep -Eo '\d+x\d+'|tr 'x' ' '))

    # get size of window (TODO : app-specific?)
    dims=($(osascript -e 'tell app "iTerm2" to get bounds of front window'|tr -d ','))

    x=$(echo "(${dims[0]} / ${screen[0]}) * ${res[0]}" | bc -l | trunc)
    y=$(echo "(${dims[1]} / ${screen[1]}) * ${res[1]}" | bc -l | trunc)

    w=$(echo "(${dims[2]} / ${screen[0]}) * ${res[0]}" | bc -l | trunc); w=$((w-x))
    h=$(echo "(${dims[3]} / ${screen[1]}) * ${res[1]}" | bc -l | trunc); h=$((h-y))

    # pixelate, THEN crop image (can't crop first since pixelation size gets weird)
    ffmpeg -y -i "$wp" -filter:v 'frei0r=pixeliz0r:0.02|0.02' "$pixd" >& /dev/null
    ffmpeg -y -i "$pixd" -vf "crop=$w:$h:$x:$y" "$crpd" >& /dev/null

    # set it as bg img of the terminal
    osascript -e "tell app \"iTerm2\" to tell current session of current window to set background image to \"$crpd\""

    rm -f "$pixd" "${pixd%.png}"
    rm -f "$crpd" "${crpd%.png}"
}

_new_terminal () {
    osascript -e "tell application \"iTerm\" to create window with default profile"
}

_reload () {
    # given $1=space id
    # reload colors by 'cat'ing appropriate file

    SPACE=$(_space_id)
    FILE="${ROOT}/sequences_$SPACE"

    if [[ -f "${ROOT}/sequences_1" ]]
    then
        DEFAULT="${ROOT}/sequences_1"
    else
        DEFAULT="${ROOT}/sequences"
    fi

    local RES
    if [[ -f $FILE ]];
        then RES=$FILE;
        else RES=$DEFAULT
    fi
    echo "$RES"
}

_clean () {
    rm -f "${ROOT}/wp_*"
    rm -f "${ROOT}/sequences*"
    rm -f "${ROOT}/colors_*"
}

_usage() {
    printf "wp: Tool for on-the-fly colorscheme changes.\n"
    printf "Version: %s\n" "${VERSION}"
    printf "Usage:\n"
    printf "\twp --clean \t\t\tClear out manually-cached pywal files (e.g. colors_1.sh)\n"
    printf "\twp -w|--wallpaper FILE\t\tSet wallpaper to FILE and cache colors\n"
    printf "\twp --wo|--wallpaper-only FILE\tJust set wallpaper to FILE\n"
    printf "\twp -n|--new \t\t\tNew iTerm window with default profile\n"
    printf "\twp -r|--reload \t\t\tLoad space-specific colorscheme\n"
    printf "\twp -b|--both FILE\t\tSet wallpaper and reload colors\n"
    printf "\twp -c|--copy ID_src ID2_dest\tCopy sequences_ID_src to sequences_ID_dest\n"
    printf "\twp -f|--file ID\t\t\tAttempt to load .cache/wal/sequences_ID\n"
    printf "\t\t\t\t\t\tNote - reloading too soon might not work for complex images\n"
    printf "\n"
    printf "\twp -t|--transparency REAL\tSet transparency of terminal (0.0 to 1.0)\n"
    printf "\twp --tg|--transparency-get\tGet the current terminal's transparency (0.0 to 1.0)\n"
    printf "\twp --get-wallpaper\t\tGet current wallpaper file\n"
    printf "\twp --pixelate\t\t\tSet background of term to pixelated version of current wallpaper\n"
    # printf "\t\t\t\t\t\t- requires iTerm2 on mac\n"
    # printf "\t\t\t\t\t\t- requires ffmpeg with frei0r\n"
    # todo complete day/night/toggle
}

case "$1" in
    --clean)
        _clean
        ;;
    -w|--wallpaper)
        shift
        change_wallpaper "$@"
        ;;
    -wo|--wallpaper-only)
        shift
        change_wallpaper --dry "$@"
        ;;
    -n|--new)
        _new_terminal
        ;;
    -c|--copy)
        [[ -z $2 || -z $3 ]] && echo 'Two arguments required.' && exit 1
        _copy "$2" "$3"
        ;;
    -r|--reload)
        cat "$(_reload)" && $0 --cursor
        ;;
    -b|--both)
        $0 --wallpaper "$2"
        sleep 1
        $0 --reload
        ;;
    -f|--file)
        # if that file doesnt exist, just err back to caller
        cat "${ROOT}/sequences_$2" && $0 --cursor
        ;;
    --cursor)
        # ensure the cursor is readable, make it ecdbb2
        # (does this only work in iterm2?)
        printf "\033]Plecdbb2\033\\"
        ;;
    --get-wallpaper)
        get_wallpaper
        ;;
    --pixelate)
        pixelate
        ;;
    -t|--transparency)
        osascript -e "tell application \"iTerm\" to tell current window to tell current session to set transparency to $2"
        ;;
    --tg|--transparency-get)
        # NOTE - cmd+u makes an iTerm window opaque?
        osascript -e 'tell application "iTerm" to tell current window to tell current session to get transparency'
        ;;
    --day)
        # Instead should progressively set Flux temp higher to ease transition
        killall Flux &> /dev/null
        # if Flux doesn't set to dark mode, don't need this toggle
        #khd -p "cmd + alt + ctrl - t"

        export NIGHT=0
        #return 0
        ;;
    --night)
        open -a Flux
        # change colorshemes (?) and wallpapers

        export NIGHT=1
        #return 0
        ;;
    --toggle)
        if [[ -z "$NIGHT" ]]; then
            export NIGHT=1
        fi

        if [[ "$NIGHT" ]]; then
            NIGHT=1
            day
        else
            NIGHT=0
            night
        fi
        ;;
    # TODO - should i include these in wp?
    # --bonsai)
    #     ~/.bin/bonsai.sh
    #     ;;
    # --coffee)
    #     ~/.bin/coffee.sh
    #     ;;
    --termcolors)
        # Display terminal ANSI colors
        # Print numbers
        echo -en "    \t"
        for i in {0..7}; do echo -en "  ${i}    \t"; done; echo

        # Print regular colors
        echo -en "reg:\t"
        for i in {0..7}; do echo -en "\033[0;3${i}m▉▉▉▉▉▉▉\t"; done; echo; echo

        # Print alternate colors
        echo -en "alt:\t"
        for i in {0..7}; do echo -en "\033[1;3${i}m▉▉▉▉▉▉▉\t"; done; echo
        ;;
    -h|--help)
        _usage
        ;;
    *)
        [[ -n "$1" ]] && echo "Not supported: $1"
        _usage
        ;;
esac
